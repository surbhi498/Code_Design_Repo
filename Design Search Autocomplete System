642. Design Search Autocomplete System
Description
Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#').

You are given a string array sentences and an integer array times both of length n where sentences[i] is a previously typed sentence and times[i] is the corresponding number of times the sentence was typed. For each input character except '#', return the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed.

Here are the specific rules:

The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.
Implement the AutocompleteSystem class:

AutocompleteSystem(String[] sentences, int[] times) Initializes the object with the sentences and times arrays.
List<String> input(char c) This indicates that the user typed the character c.
Returns an empty array [] if c == '#' and stores the inputted sentence in the system.
Returns the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than 3 matches, return them all.

 

Example 1:

Input
["AutocompleteSystem", "input", "input", "input", "input"]
[[["i love you", "island", "iroman", "i love leetcode"], [5, 3, 2, 2]], ["i"], [" "], ["a"], ["#"]]
Output
[null, ["i love you", "island", "i love leetcode"], ["i love you", "i love leetcode"], [], []]

Explanation
AutocompleteSystem obj = new AutocompleteSystem(["i love you", "island", "iroman", "i love leetcode"], [5, 3, 2, 2]);
obj.input("i"); // return ["i love you", "island", "i love leetcode"]. There are four sentences that have prefix "i". Among them, "ironman" and "i love leetcode" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114, "i love leetcode" should be in front of "ironman". Also we only need to output top 3 hot sentences, so "ironman" will be ignored.
obj.input(" "); // return ["i love you", "i love leetcode"]. There are only two sentences that have prefix "i ".
obj.input("a"); // return []. There are no sentences that have prefix "i a".
obj.input("#"); // return []. The user finished the input, the sentence "i a" should be saved as a historical sentence in system. And the following input will be counted as a new search.
 

Constraints:

n == sentences.length
n == times.length
1 <= n <= 100
1 <= sentences[i].length <= 100
1 <= times[i] <= 50
c is a lowercase English letter, a hash '#', or space ' '.
Each tested sentence will be a sequence of characters c that end with the character '#'.
Each tested sentence will have a length in the range [1, 200].
The words in each input sentence are separated by single spaces.
At most 5000 calls will be made to input



// Online C++ compiler to run C++ program online
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
struct Trie{
    Trie* children[27];
    // the value is associated with each word:
    int v;
    // the word associated
    string w;
    Trie(){
        memset(children, 0, sizeof(children));
        v=0; // no frequency yet
        w=""; // intially now word is being stored
    }
    void insert(string& word, int t){
        Trie* node = this; // start from root node
        for(char c : word){
            int idx = (c == ' ') ? 26 : (c-'a');
            if(!node->children[idx]){
                node->children[idx] = new Trie();
            }
            node = node->children[idx];
            
        }
        node->v+=t;
        node->w = word;
    }
    Trie* Search(const string& pref){
        Trie* node = this;
        for(char c : pref){
            int idx = (c == ' ') ? 26 : (c - 'a');
            if(!node->children[idx]){
                return nullptr;
            }
            node=node->children[idx];
        }
        return node;
    }
    
};
class AutocompleteSystem{
    private:
    Trie* trie; // root of the trie
    string t;
    struct compare{
        bool operator()(Trie* a, Trie* b){
            // if two freq are equal:
             if (a->v == b->v) return a->w < b->w; // pop lexicographically larger
            return a->v > b->v; // pop smaller frequency
        }
    };
    void dfs(Trie* node, priority_queue<Trie*, vector<Trie*>, compare>& pq){
        if(!node) return;
        if(node->v > 0){
            pq.push(node);
            if(pq.size()>3){
                pq.pop();
            }
        }
        for(Trie* next : node->children){
            dfs(next, pq);
        }
        
    }
    public:
    AutocompleteSystem(vector<string>& sentences, vector<int>& times){
        trie = new Trie();
        for(int i=0;i<sentences.size();i++){
            trie->insert(sentences[i], times[i]);
        }
        t="";
    }
    vector<string> input(char c){
        vector<string> res;
        if(c == '#'){
            trie->insert(t, 1);
            t.clear();
            return res;
        }
        t.push_back(c);
        Trie* node = trie->Search(t);
        if(!node) return res;
        priority_queue<Trie*, vector<Trie*>, compare> pq;
        dfs(node, pq);
        while(!pq.empty()){
            res.insert(res.begin(), pq.top()->w);
            pq.pop();
        }
        return res;
        
    }
};

int main() {
    // Write C++ code here
  
     vector<string> sentences = {"i love you", "island", "ironman", "i love leetcode"};
    vector<int> times = {5, 3, 2, 2};
    AutocompleteSystem ac(sentences, times);

    for (string& s : ac.input('i')) cout << s << endl;
    return 0;
}

